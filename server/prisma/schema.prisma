generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  SCHOOL
  TEACHER
  STUDENT
}

model Admin {
  id        Int      @id @default(autoincrement())
  fullName  String
  email     String   @unique
  password  String
  username  String   @default("unknown")
  role      Role     @default(ADMIN)
  phone     String   @default("0123456789") @db.VarChar(10)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model School {
  id          Int          @id @default(autoincrement())
  fullName    String       @default("Unknown")
  email       String       @unique
  password    String
  code        String       @unique @default("SC000")
  address     String       @default("Not Provided")
  contact     BigInt       @default(0)
  principal   String       @default("Unknown")
  established Int          @default(2000)
  role        Role         @default(SCHOOL)
  teachers    Teacher[]
  students    Student[]
  departments Department[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Teacher {
  id           Int      @id @default(autoincrement())
  fullName     String
  email        String   @unique
  password     String
  class        String   @db.Text
  subjects     String   @db.Text
  joining_year DateTime @default(now())
  experience   String   @default("5+")
  role         Role     @default(TEACHER)
  schoolId     Int
  school       School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Student {
  id              Int       @id @default(autoincrement())
  firstName       String
  middleName      String?
  lastName        String
  dateOfBirth     DateTime
  gender          String
  bloodGroup      String?
  nationality     String?
  religion        String?
  category        String?
  aadhaarNumber   String?
  mobileNumber    String
  email           String?
  emergencyContact String?
  admissionNo     String    @unique
  rollNumber      String?
  className       String
  section         String?
  admissionDate   DateTime  @default(now())
  previousSchool  String?
  
  // Address fields
  houseNo         String?
  street          String?
  city            String
  state           String
  pinCode         String?
  
  // Parent information
  fatherName      String
  fatherOccupation String?
  fatherContact   String?
  fatherEmail     String?
  
  motherName      String
  motherOccupation String?
  motherContact   String?
  motherEmail     String?
  
  // Relations
  schoolId        Int
  school          School    @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  
  // Meta
  role            Role      @default(STUDENT)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Department {
  id             Int      @id @default(autoincrement())
  departmentName String
  hOD            String
  faculty_count  Int
  description    String   @db.Text
  schoolId       Int
  school         School   @relation(fields: [schoolId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}
