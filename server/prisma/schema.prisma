generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  SCHOOL
  TEACHER
  STUDENT
}

model Admin {
  id        Int       @id @default(autoincrement())
  fullName  String
  email     String    @unique
  password  String
  username  String    @default("unknown")
  role      Role      @default(ADMIN)
  phone     String    @default("0123456789") @db.VarChar(15) // Changed length to 15
  status    String    @default("active") // Added status field
  lastLogin DateTime? // Added lastLogin field
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model School {
  id                   Int                   @id @default(autoincrement())
  fullName             String                @default("Unknown")
  email                String                @unique
  password             String
  username             String                @unique @default(cuid())
  code                 String                @unique @default("SC000")
  address              String                @default("Not Provided")
  contact              BigInt                @default(0)
  phone                String                @default("0123456789") @db.VarChar(15)
  principal            String                @default("Unknown")
  established          Int                   @default(2000)
  role                 Role                  @default(SCHOOL)
  status               String                @default("active")
  lastLogin            DateTime?
  teachers             Teacher[]
  students             Student[]
  departments          Department[]
  transferCertificates TransferCertificate[]
  Registration         Registration[]
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
}

model Teacher {
  id           Int       @id @default(autoincrement())
  fullName     String
  email        String    @unique
  password     String
  username     String    @unique @default(cuid()) // Added username field
  phone        String    @default("0123456789") @db.VarChar(15) // Added phone field
  class        String    @db.Text
  subjects     String    @db.Text
  joining_year DateTime  @default(now())
  experience   String    @default("5+")
  role         Role      @default(TEACHER)
  status       String    @default("active") // Added status field
  lastLogin    DateTime? // Added lastLogin field
  schoolId     Int
  school       School    @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Student {
  id               Int      @id @default(autoincrement())
  // Student Information
  branchName       String?
  firstName        String
  middleName       String?
  lastName         String
  admissionNo      String   @unique
  penNo            String? // Added PEN Number field
  studentId        String?
  dateOfBirth      DateTime
  age              Int? // Added calculated age field
  gender           String
  bloodGroup       String?
  nationality      String?
  religion         String?
  category         String?
  caste            String?
  aadhaarNumber    String?
  mobileNumber     String
  email            String?
  emergencyContact String?

  // Academic fields
  rollNumber     String?
  className      String
  section        String?
  stream         String? // Added stream field
  semester       String? // Added semester field
  admissionDate  DateTime @default(now())
  previousSchool String?  @db.Text

  // Address fields (modified to include permanent and present address)
  presentHouseNo String?
  presentStreet  String? @db.Text
  presentCity    String
  presentState   String
  presentPinCode String?

  permanentHouseNo String?
  permanentStreet  String? @db.Text
  permanentCity    String?
  permanentState   String?
  permanentPinCode String?

  // Parent information (reduced to essential fields)
  fatherName String
  motherName String

  // Relations
  schoolId      Int
  school        School         @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  parentInfo    ParentInfo?
  sessionInfo   SessionInfo?
  transportInfo TransportInfo?
  documents     Documents?
  educationInfo EducationInfo?
  otherInfo     OtherInfo?

  // Meta
  transferCertificates TransferCertificate[]
  role                 Role                  @default(STUDENT)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
}

// Normalized tables to reduce row size

model ParentInfo {
  id                     Int     @id @default(autoincrement())
  // Father details
  fatherQualification    String?
  fatherOccupation       String?
  fatherContact          String?
  fatherEmail            String?
  fatherAadhaarNo        String?
  fatherAnnualIncome     String?
  fatherIsCampusEmployee String? @default("no")

  // Mother details
  motherQualification    String?
  motherOccupation       String?
  motherContact          String?
  motherEmail            String?
  motherAadhaarNo        String?
  motherAnnualIncome     String?
  motherIsCampusEmployee String? @default("no")

  // Guardian information
  guardianName    String?
  guardianAddress String? @db.Text
  guardianContact String?

  // Relation
  studentId Int     @unique
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model SessionInfo {
  id            Int     @id @default(autoincrement())
  // Admit Session
  admitGroup    String?
  admitStream   String?
  admitClass    String?
  admitSection  String?
  admitRollNo   String?
  admitSemester String?
  admitFeeGroup String?
  admitHouse    String?

  // Current Session
  currentGroup    String?
  currentStream   String?
  currentClass    String?
  currentSection  String?
  currentRollNo   String?
  currentSemester String?
  currentFeeGroup String?
  currentHouse    String?

  // Relation
  studentId Int     @unique
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model TransportInfo {
  id              Int     @id @default(autoincrement())
  transportMode   String?
  transportArea   String?
  transportStand  String?
  transportRoute  String?
  transportDriver String?
  pickupLocation  String? // Added pickup location
  dropLocation    String? // Added drop location

  // Relation
  studentId Int     @unique
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model Documents {
  id                       Int     @id @default(autoincrement())
  studentImagePath         String? @db.Text
  fatherImagePath          String? @db.Text
  motherImagePath          String? @db.Text
  guardianImagePath        String? @db.Text
  signaturePath            String? @db.Text
  parentSignaturePath      String? @db.Text // Added parent signature
  fatherAadharPath         String? @db.Text
  motherAadharPath         String? @db.Text
  birthCertificatePath     String? @db.Text
  migrationCertificatePath String? @db.Text
  aadhaarCardPath          String? @db.Text
  affidavitCertificatePath String? @db.Text // Added affidavit certificate
  incomeCertificatePath    String? @db.Text // Added income certificate
  addressProof1Path        String? @db.Text // Added address proof 1
  addressProof2Path        String? @db.Text // Added address proof 2

  // Academic registration
  academicRegistrationNo String?

  // Relation
  studentId Int     @unique
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model EducationInfo {
  id                Int       @id @default(autoincrement())
  lastSchool        String?   @db.Text
  lastSchoolAddress String?   @db.Text
  lastTcDate        DateTime?
  lastClass         String?
  lastPercentage    String?
  lastAttendance    String?
  lastExtraActivity String?   @db.Text

  // Relation
  studentId Int     @unique
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model OtherInfo {
  id                 Int     @id @default(autoincrement())
  belongToBPL        String? @default("no")
  minority           String? @default("no")
  disability         String?
  accountNo          String?
  bank               String?
  ifscCode           String?
  medium             String?
  lastYearResult     String?
  singleParent       String? @default("no")
  onlyChild          String? @default("no")
  onlyGirlChild      String? @default("no")
  adoptedChild       String? @default("no")
  siblingAdmissionNo String?
  transferCase       String? @default("no")
  livingWith         String?
  motherTongue       String?
  admissionType      String? @default("new")
  udiseNo            String?

  // Relation
  studentId Int     @unique
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model Department {
  id             Int      @id @default(autoincrement())
  departmentName String
  hOD            String
  faculty_count  Int
  description    String   @db.Text
  schoolId       Int
  school         School   @relation(fields: [schoolId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Fee {
  id              String   @id @default(uuid())
  admissionNumber String
  studentName     String
  fatherName      String // Added father's name field
  class           String
  section         String
  totalFees       Float
  amountPaid      Float
  feeAmount       Float
  paymentDate     DateTime
  paymentMode     String
  receiptNumber   String
  status          String // 'Paid', 'Pending', 'Partial'   // 'Paid', 'Pending', 'Partial'
  feeCategory     String? // Optional fee category field
  feeCategories   String?  @db.Text // Store array as JSON string in Text field

  // School relationship
  schoolId Int?

  // School relationship

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Fee Structure models for managing class fee structures
model FeeStructure {
  id             String        @id @default(uuid())
  className      String
  description    String?       @db.Text
  schoolId       Int // To associate with a particular school
  categories     FeeCategory[]
  totalAnnualFee Float         @default(0)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model FeeCategory {
  id          String       @id @default(uuid())
  name        String // Name of the fee category (e.g., "Tuition Fee", "Library Fee")
  amount      Float // The fee amount
  frequency   String // "Monthly", "Quarterly", "Yearly"
  description String?      @db.Text
  structureId String // Foreign key to relate to a fee structure
  structure   FeeStructure @relation(fields: [structureId], references: [id], onDelete: Cascade)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model TransferCertificate {
  id              Int      @id @default(autoincrement())
  // Student Information
  admissionNumber String
  fullName        String
  fatherName      String
  motherName      String
  dateOfBirth     DateTime
  nationality     String
  category        String
  dateOfAdmission DateTime

  // Academic Information
  currentClass          String
  whetherFailed         WhetherFailed   @default(No) // Enum for whether failed or not
  section               String
  rollNumber            String?
  examAppearedIn        ExamAppearedIn  @default(School) // Enum for exam appeared in
  qualifiedForPromotion QualifiedStatus @default(Yes) // Enum for qualified status

  // Transfer Details
  reasonForLeaving   ReasonForLeaving // Enum for reason for leaving
  dateOfLeaving      DateTime
  lastAttendanceDate DateTime
  toClass            String?
  classInWords       String?

  // Academic Performance
  maxAttendance      Int
  obtainedAttendance Int
  subjectsStudied    String @db.Text

  // Conduct Information
  generalConduct  ConductStatus // Enum for conduct status
  behaviorRemarks String?       @db.Text

  // Financial Information
  feesPaidUpTo  DateTime
  tcCharge      Float                @default(0)
  feeConcession FeeConcessionStatus? @default(None) // Enum for fee concession status

  // Activities and Games
  gamesPlayed     String? @db.Text // Stored as JSON string
  extraActivities String? @db.Text // Stored as JSON string

  // School Details
  schoolId   Int
  school     School   @relation(fields: [schoolId], references: [id])
  issuedDate DateTime @default(now())
  tcNumber   String   @unique
  tcstatus   Int      @default(1) // 1=Issued, 2=Cancelled, 0=Draft

  // Relations
  studentId Int
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([admissionNumber])
  @@index([tcNumber])
  @@index([issuedDate])
}

// Enums for select fields
enum QualifiedStatus {
  Yes
  No
  NA
  Pass
  Fail
  Compartment
  AsperCBSEBoardResult
  AppearedinclassXExam
  AppearedinclassXIIExam
}

enum ReasonForLeaving {
  FamilyRelocation
  AdmissionInOtherSchool
  Duetolongabsencewithoutinformation
  FatherJobTransfer
  GetAdmissioninHigherClass
  GoingtoNativePlace
  ParentWill
  Passedoutfromtheschool
  Shiftingtootherplace
  TransferCase
  Other
}

enum ConductStatus {
  Excellent
  Good
  Satisfactory
  NeedsImprovement
  Poor
}

enum FeeConcessionStatus {
  None
  Partial
  Full
}

enum GamesPlayed {
  Football
  Cricket
  Swimming
  Basketball
  Kabaddi
  Volleyball
  Athlete
  Chess
  Badminton
}

enum ExtraCurricularActivities {
  ParticipateInStageShow
  ParticipateInSports
  ParticipateInDebate
  ParticipateInQuiz
  ParticipateInPainting
  ParticipateInSinging
  ParticipateInDancing
  ParticipateInOther
}

enum ExamAppearedIn {
  School
  Board
  NA
  CBSEBoard
  SchoolFailed
  SchoolPassed
  SchoolCompartment
  BoardPassed
  BoardFailed
  BoardCompartment
}

enum WhetherFailed {
  Yes
  No
  NA
  CBSEBoard
}

model Registration {
  // student information
  registrationId      String  @id @default(uuid())
  firstName           String
  lastName            String
  gender              String
  formNo              String  @unique
  dob                 String
  category            String
  religion            String
  // schoolId            Int
  // school              School    @relation(fields: [schoolId], references: [id], onDelete: Cascade),
  registerForClass    String
  admissionCategory   String
  bloodGroup          String
  regnDate            String
  testDate            String
  transactionNo       String
  singleParent        Boolean
  contactNo           String
  studentEmail        String
  address             String
  city                String
  state               String
  pincode             String
  studentAadharCardNo String
  regnCharge          String
  examSubject         String
  paymentStatus       String

  // father Details
  fatherName             String
  fatherMobileNo         String
  smsAlert               Boolean
  fatherEmail            String
  fatherAadharCardNo     String
  isFatherCampusEmployee Boolean

  // mother Details
  motherName         String
  motherMobileNo     String
  motherAadharCardNo String

  // documents 
  casteCertificate              String?
  studentAadharCard             String?
  fatherAadharCard              String?
  motherAadharCard              String?
  previousClassMarksheet        String?
  transferCertificate           String?
  studentDateOfBirthCertificate String?
  School                        School? @relation(fields: [schoolId], references: [id])
  schoolId                      Int?
}
